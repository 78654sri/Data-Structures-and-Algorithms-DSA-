def countSubstrings(s, k):
    left = 0
    count_0 = 0
    count_1 = 0
    total_substrings = 0

    for right in range(len(s)):
        # Expand the window
        if s[right] == '0':
            count_0 += 1
        else:
            count_1 += 1

        # Shrink the window until it satisfies the k-constraint
        while count_0 > k and count_1 > k:
            if s[left] == '0':
                count_0 -= 1
            else:
                count_1 -= 1
            left += 1

        # Count the number of valid substrings that end at 'right'
        total_substrings += (right - left + 1)

    return total_substrings

# Example usage:
s = "10101"
k = 1
print(countSubstrings(s, k))  # Output: 12




def countSubstrings(s, k):
    total_substrings = 0
    n = len(s)
    
    # Generate all possible substrings
    for start in range(n):
        count_0 = 0
        count_1 = 0
        for end in range(start, n):
            if s[end] == '0':
                count_0 += 1
            else:
                count_1 += 1
            
            # Check if the current substring satisfies the k-constraint
            if count_0 <= k or count_1 <= k:
                total_substrings += 1
            else:
                break
    
    return total_substrings

# Example usage:
s = "10101"
k = 1
print(countSubstrings(s, k))  # Output: 12

def brute_force_longest_ones(nums, k):
    max_len = 0
    
    for i in range(len(nums)):
        zeros = 0
        
        for j in range(i, len(nums)):
            if nums[j] == 0:
                zeros += 1
            
            if zeros <= k:
                max_len = max(max_len, j - i + 1)
            else:
                break
    
    return max_len

# Example usage:
nums = [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0]
k = 2
print(brute_force_longest_ones(nums, k))  # Output: 6




def longest_ones(nums, k):
    start = 0
    max_len = 0
    zeros = 0

    for end in range(len(nums)):
        if nums[end] == 0:
            zeros += 1  # Increment the number of zeros when encountering a 0

        # If there are more than k zeros, shift the window from the left
        while zeros > k:
            if nums[start] == 0:
                zeros -= 1
            start += 1

        # Update the maximum length of the valid subarray
        max_len = max(max_len, end - start + 1)

    return max_len

# Example usage:
nums = [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0]
k = 2
print(longest_ones(nums, k)) 